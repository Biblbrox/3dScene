#version 330 core

// Texture coords
in vec2 TextureCoords;

in vec3 Normal;
in vec3 FragPos;

// Texture number
uniform sampler2D TextureNum;

uniform bool isPrimitive;
uniform float alpha;
uniform vec3 primColor;
uniform vec3 viewPos;

uniform bool lighting;

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

uniform Material material;

struct Light {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Light light;

out vec4 FragColor;

void main()
{
    if (!isPrimitive) {
        FragColor = texture(TextureNum, TextureCoords);
        if (lighting) {
            // ambient
            vec3 ambient = light.ambient * material.ambient;

            // diffuse
            vec3 norm = normalize(Normal);
            vec3 lightDir = normalize(light.position - FragPos);
            float diff = max(dot(norm, lightDir), 0.0);
            vec3 diffuse = light.diffuse * (diff * material.diffuse);

            // specular
            vec3 viewDir = normalize(viewPos - FragPos);
            vec3 reflectDir = reflect(-lightDir, norm);
            float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
            vec3 specular = light.specular * (spec * material.specular);

            vec3 result = ambient + diffuse + specular;

            FragColor.xyz *= result;
        }
    } else {
        FragColor = vec4(primColor, alpha);
    }
}